---
http_interactions:
- request:
    method: get
    uri: http://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - portal.mosman.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx
      X-Frame-Options:
      - SAMEORIGIN
      Date:
      - Sun, 09 Jun 2019 16:17:35 GMT
      Content-Length:
      - '193'
    body:
      encoding: UTF-8
      string: |-
        <head><title>Document Moved</title></head>
        <body><h1>Object Moved</h1>This document may be found <a HREF="https://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx">here</a></body>
    http_version: 
  recorded_at: Tue, 14 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - portal.mosman.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - text/html; charset=utf-8
      Set-Cookie:
      - ASP.NET_SessionId=zgsldefukfbkswl13x3zn1jq; path=/; HttpOnly
      X-Frame-Options:
      - SAMEORIGIN
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Sun, 09 Jun 2019 16:17:35 GMT
      Content-Length:
      - '57732'
    body:
      encoding: UTF-8
      string: "\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
        \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\"
        class=\"no-touch wf-proximanova-n7-active wf-proximanova-i7-active wf-proximanova-n4-active
        wf-proximanova-i4-active wf-active\" >\r\n    <link rel=\"stylesheet\" href=\"https://portal.mosman.nsw.gov.au/App_Themes/user/css_stylesheets_smallscreen_css_t_5.css\"
        media=\"screen and (max-width: 1280px)\"><!-- href=\"http://mosman.nsw.gov.au/css/stylesheets/smallscreen.css?t=5\"
        -->\r\n    <link rel=\"stylesheet\" href=\"https://portal.mosman.nsw.gov.au/App_Themes/user/css_stylesheets_print_css_t_4.css\"
        media=\"print\"><!-- href=\"http://mosman.nsw.gov.au/css/stylesheets/print.css?t=4\"
        -->\r\n<head id=\"ctl00_Head1\"><title>\r\n\tFind an Application\r\n</title><meta
        http-equiv=\"Expires\" content=\"0\" /><meta http-equiv=\"Cache-Control\"
        content=\"no-cache\" /><meta http-equiv=\"Pragma\" content=\"no-cache\" /><link
        href=\"../../favicon.ico\" type=\"image/x-icon\" rel=\"icon\" /><link href=\"../../favicon.ico\"
        type=\"image/x-icon\" rel=\"shortcut icon\" /><link href=\"../../HttpCombiner.ashx?s=IconCss&amp;t=text/css\"
        type=\"text/css\" rel=\"Stylesheet\" media=\"all\" />\r\n    <base target=\"_top\"
        />\r\n\t\r\n    <!-- Conditional Queries to load the Formatted Lists CSS files
        -->  \r\n    <!--[if lt IE 8]>\r\n        <link type=\"text/css\" href=\"../../App_Themes/Icon/IE7.css\"
        rel=\"Stylesheet\" />\r\n    <![endif]-->\r\n\r\n    <!--[if gt IE 7]>\r\n
        \       <link type=\"text/css\" href=\"../../App_Themes/Icon/FormattedLists.css\"
        rel=\"Stylesheet\" />\r\n    <![endif]-->\r\n\r\n    <!--[if !IE]><!-->\r\n
        \       <link type=\"text/css\" href=\"../../App_Themes/Icon/FormattedLists.css\"
        rel=\"Stylesheet\" />\r\n    <!--<![endif]-->\r\n    <link type=\"text/css\"
        rel=\"stylesheet\" href=\"https://portal.mosman.nsw.gov.au/App_Themes/user/min_g_style_12345.css\"
        /><!-- href=\"http://www.mosman.nsw.gov.au/min/g=style&amp;12345\" -->\r\n
        \   <link type=\"text/css\" rel=\"stylesheet\" media=\"screen and (max-width:
        767px)\" href=\"https://portal.mosman.nsw.gov.au/App_Themes/user/css_stylesheets_mobile_css_t_22.css\"
        /><!-- href=\"http://mosman.nsw.gov.au/css/stylesheets/mobile.css?t=22\" -->\r\n
        \   <script src=\"https://use.typekit.net/bel7ivu.js\" async=\"\"></script>\t\r\n
        \   <style type=\"text/css\">.tk-proxima-nova{font-family:\"proxima-nova\",sans-serif;}</style>\r\n
        \   <style type=\"text/css\">@font-face{font-family:tk-proxima-nova-n7;src:url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/l?subset_id=2&fvd=n7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/d?subset_id=2&fvd=n7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/a?subset_id=2&fvd=n7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:700;font-style:normal;}@font-face{font-family:tk-proxima-nova-i7;src:url(https://use.typekit.net/af/5a684a/00000000000000003b9ad1b2/27/l?subset_id=2&fvd=i7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/5a684a/00000000000000003b9ad1b2/27/d?subset_id=2&fvd=i7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/5a684a/00000000000000003b9ad1b2/27/a?subset_id=2&fvd=i7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:700;font-style:italic;}@font-face{font-family:tk-proxima-nova-n4;src:url(https://use.typekit.net/af/edab9a/00000000000000003b9ad1b9/27/l?subset_id=2&fvd=n4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/edab9a/00000000000000003b9ad1b9/27/d?subset_id=2&fvd=n4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/edab9a/00000000000000003b9ad1b9/27/a?subset_id=2&fvd=n4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:400;font-style:normal;}@font-face{font-family:tk-proxima-nova-i4;src:url(https://use.typekit.net/af/1b9fb4/00000000000000003b9ad1ba/27/l?subset_id=2&fvd=i4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/1b9fb4/00000000000000003b9ad1ba/27/d?subset_id=2&fvd=i4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/1b9fb4/00000000000000003b9ad1ba/27/a?subset_id=2&fvd=i4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:400;font-style:italic;}</style>\r\n    <style
        type=\"text/css\">@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/l?subset_id=2&fvd=n7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/d?subset_id=2&fvd=n7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/03034e/00000000000000003b9ad1b1/27/a?subset_id=2&fvd=n7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:700;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/5a684a/00000000000000003b9ad1b2/27/l?subset_id=2&fvd=i7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/5a684a/00000000000000003b9ad1b2/27/d?subset_id=2&fvd=i7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/5a684a/00000000000000003b9ad1b2/27/a?subset_id=2&fvd=i7&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:700;font-style:italic;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/edab9a/00000000000000003b9ad1b9/27/l?subset_id=2&fvd=n4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/edab9a/00000000000000003b9ad1b9/27/d?subset_id=2&fvd=n4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/edab9a/00000000000000003b9ad1b9/27/a?subset_id=2&fvd=n4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:400;font-style:normal;}@font-face{font-family:proxima-nova;src:url(https://use.typekit.net/af/1b9fb4/00000000000000003b9ad1ba/27/l?subset_id=2&fvd=i4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff2\"),url(https://use.typekit.net/af/1b9fb4/00000000000000003b9ad1ba/27/d?subset_id=2&fvd=i4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"woff\"),url(https://use.typekit.net/af/1b9fb4/00000000000000003b9ad1ba/27/a?subset_id=2&fvd=i4&token=PGiPLBoweCJ1TEnH9mwv9jOejs3VYLyLW46e4D3rJPR7rCrrPo9AiyisAaoRWOCq)
        format(\"opentype\");font-weight:400;font-style:italic;}</style>\r\n    <style
        type=\"text/css\">.fancybox-margin{margin-right:17px;}</style>\r\n    \r\n
        \   <style type='text/css'></style><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"
        /><meta name=\"robots\" content=\"noindex, nofollow\" /><link href=\"../../App_Themes/Default/Default.css\"
        type=\"text/css\" rel=\"stylesheet\" /><link href=\"../../App_Themes/Default/User.css\"
        type=\"text/css\" rel=\"stylesheet\" /></head>\r\n<body>\r\n    <!--<div class=\"sticky-container
        hidden-sm hide-xs\"><ul class=\"sticky\"><li class=\"blue01\"><p><a class=\"ttip
        tooltipstered\" href=\"http://mosman.nsw.gov.au/news\" style=\"\"><span class=\"glyphicon
        svg icon-news\" data-icon=\"x\"></span></a></p></li><li class=\"blue02\"><p><a
        class=\"ttip tooltipstered\" href=\"javascript:void(0)\" style=\"\"><span
        class=\"glyphicon svg icon-textsize \" data-icon=\"z\"></span></a></p></li><li><p><a
        target=\"_blank\" class=\"ttip tooltipstered\" href=\"http://www.youtube.com/user/mosmancouncil\"
        style=\"\"><span class=\"glyphicon svg icon-youtube1\" data-icon=\"c\"></span></a></p></li><li><p><a
        class=\"ttip tooltipstered\" target=\"_blank\" href=\"https://twitter.com/MosmanCouncil\"
        style=\"\"><span class=\"glyphicon svg icon-twitter1\" data-icon=\"o\"></span></a></p></li><li><p><a
        class=\"ttip tooltipstered\" target=\"_blank\" href=\"https://www.facebook.com/mosmancouncil\"
        style=\"\"><span class=\"glyphicon svg icon-facebook1\" data-icon=\"h\"></span></a></p></li><li><p><a
        class=\"ttip tooltipstered\" target=\"_blank\" href=\"https://www.flickr.com/photos/mosmancouncil/\"
        style=\"\"><span class=\"glyphicon svg icon-flickr1\" data-icon=\"i\"></span></a></p></li><li><p><a
        class=\"ttip tooltipstered\" href=\"http://mosman.nsw.gov.au/web/newsletters\"
        style=\"\"><span class=\"glyphicon svg icon-email1\" data-icon=\"g\"></span></a></p></li></ul></div>-->\r\n
        \   <form method=\"post\" action=\"./SearchApplication.aspx\" id=\"aspnetForm\"
        role=\"form\" autocomplete=\"off\">\r\n<input type=\"hidden\" name=\"ctl00_rcss_TSSM\"
        id=\"ctl00_rcss_TSSM\" value=\"\" />\r\n<input type=\"hidden\" name=\"ctl00_script_TSM\"
        id=\"ctl00_script_TSM\" value=\"\" />\r\n<input type=\"hidden\" name=\"__VIEWSTATE\"
        id=\"__VIEWSTATE\" value=\"\"
        />\r\n\r\n\r\n<script src=\"/Telerik.Web.UI.WebResource.axd?_TSM_HiddenField_=ctl00_script_TSM&amp;compress=1&amp;_TSM_CombinedScripts_=%3b%3bSystem.Web.Extensions%2c+Version%3d4.0.0.0%2c+Culture%3dneutral%2c+PublicKeyToken%3d31bf3856ad364e35%3aen%3aba042b74-ece8-499a-8da9-ecf37f7b3e32%3aea597d4b\"
        type=\"text/javascript\"></script>\r\n<script type=\"text/javascript\">\r\n//<![CDATA[\r\nif
        (typeof(Sys) === 'undefined') throw new Error('ASP.NET Ajax client-side framework
        failed to load.');\r\n//]]>\r\n</script>\r\n\r\n<input type=\"hidden\" name=\"__VIEWSTATEGENERATOR\"
        id=\"__VIEWSTATEGENERATOR\" value=\"FD370D2E\" />\r\n<input type=\"hidden\"
        name=\"__EVENTVALIDATION\" id=\"__EVENTVALIDATION\" value=\"/wEdAAMVBiW6MV5ytaamMAEZvlZpnexQA0tUWxhXiF1Lx87GyZtWKg6RvYaBd0w/zXbzv0lGdeI9fxcLmfv9xtQyq7R3rehoEg==\"
        />\r\n        \r\n        <script type=\"text/javascript\" src=\"../../HttpCombiner.ashx?s=IconJs&t=text/javascript\"></script>\r\n
        \       <script type=\"text/javascript\">\r\n            jGrowlPosition =
        \"top-right\";\r\n        </script>\r\n        <div id=\"ctl00_throbber_throbber\"
        class=\"globalThrobber\">\r\n    <img class=\"throbber\" src=\"../../Common/Common/Image.aspx?rid=throbber.gif\"
        alt=\"Loading...\" />\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n
        \   $(document).ready(function(){        \r\n        $('.globalThrobber')\r\n
        \           .ajaxStart(function() {\r\n                if ($('.throbber:visible').length
        == 0) {\r\n                    $(this).show();\r\n                }\r\n            })
        \ \r\n            .ajaxStop(function() {\r\n                $(this).hide();\r\n
        \           })\r\n        ;\r\n    });\r\n</script>\r\n        <div id=\"docf\">\r\n
        \           <div class=\"navbar navbar-inverse \" role=\"navigation\">\n<div
        class=\"container\">\n<div id=\"header\" class=\"head-wrapper\">\n<div class=\"hidden-xs\">\n<div
        class=\"navbar-header\"><a class=\"navbar-toggle\" href=\"#my-menu\"><span
        class=\"sr-only\">Toggle navigation</span><span class=\"icon-bar\"></span><span
        class=\"icon-bar\"></span><span class=\"icon-bar\"></span></a><a class=\"navbar-brand\"
        href=\"http://mosman.nsw.gov.au/\"><img alt=\"\" src=\"https://portal.mosman.nsw.gov.au/images/6575.png\"
        width=\"207\" height=\"75\" /></a></div>\n<ul class=\"nav navbar-nav navbar-right
        satelite-nav\">\n    <li><a href=\"http://events.mosman.nsw.gov.au/?utm_source=mcwebsite&amp;utm_medium=top-menu&amp;utm_campaign=events\">What's
        On</a></li>\n    <li><a href=\"http://mosman.nsw.gov.au/library?utm_source=mcwebsite&amp;utm_medium=top-menu&amp;utm_campaign=library\">Library</a></li>\n
        \   <li><a href=\"http://mosmanartgallery.org.au/?utm_source=mcwebsite&amp;utm_medium=top-menu&amp;utm_campaign=gallery\"
        target=\"_blank\">ArtGallery</a></li>\n    <li><a href=\"http://mosman.nsw.gov.au/contact?utm_source=mcwebsite&amp;utm_medium=top-menu&amp;utm_campaign=contact\">Contact</a></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\r\n
        \           \r\n\t    <!--Get parent menu item to display-->\r\n<!--Build
        HTML of Menu-->\r\n<div class=\"navbar navbar-inverse hidden-xs fix-nav\"
        role=\"navigation\">\r\n  <div class=\"container\">\r\n    <div id=\"header\"
        class=\"head-wrapper\">\r\n      <div class=\"clearfix\">&nbsp;</div>\r\n
        \     <ul class=\"nav navbar-nav main-nav\">\r\n        <li class=\"dropdown\"
        style=\"margin-left: 0 !important;  padding-left: 0 !important;  list-style-type:
        none !important;\" onmouseover=\"toggleMainNavMenu('10741');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle \" href=\"http://www.mosman.nsw.gov.au\"
        target=\"\">Home</a>\r\n        </li>\r\n        <li class=\"dropdown\" style=\"margin-left:
        0 !important;  padding-left: 0 !important;  list-style-type: none !important;\"
        onmouseover=\"toggleMainNavMenu('10742');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle  \" href=\"http://mosman.nsw.gov.au/residents\"
        target=\"\">Residents</a>\r\n        </li>\r\n        <li class=\"dropdown\"
        style=\"margin-left: 0 !important;  padding-left: 0 !important;  list-style-type:
        none !important;\" onmouseover=\"toggleMainNavMenu('10743');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle  \" href=\"http://mosman.nsw.gov.au/community\"
        target=\"\">Community</a>\r\n        </li>\r\n        <li class=\"dropdown\"
        style=\"margin-left: 0 !important;  padding-left: 0 !important;  list-style-type:
        none !important;\" onmouseover=\"toggleMainNavMenu('10744');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle  \" href=\"http://mosman.nsw.gov.au/recreation\"
        target=\"\">Recreation</a>\r\n        </li>\r\n        <li class=\"dropdown\"
        style=\"margin-left: 0 !important;  padding-left: 0 !important;  list-style-type:
        none !important;\" onmouseover=\"toggleMainNavMenu('10745');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle activeparent\" href=\"https://mosman.nsw.gov.au/planning-and-development\"
        target=\"\">Planning+Development</a>\r\n        </li>\r\n        <li class=\"dropdown\"
        style=\"margin-left: 0 !important;  padding-left: 0 !important;  list-style-type:
        none !important;\" onmouseover=\"toggleMainNavMenu('10746');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle  \" href=\"http://mosman.nsw.gov.au/environment\"
        target=\"\">Environment</a>\r\n        </li>\r\n        <li class=\"dropdown\"
        style=\"margin-left: 0 !important;  padding-left: 0 !important;  list-style-type:
        none !important;\" onmouseover=\"toggleMainNavMenu('10747');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle  \" href=\"http://mosman.nsw.gov.au/council\"
        target=\"\">Council</a>\r\n        </li>\r\n        <li class=\"dropdown\"
        style=\"margin-left: 0 !important;  padding-left: 0 !important;  list-style-type:
        none !important;\" onmouseover=\"toggleMainNavMenu('10748');\" onmouseout=\"toggleMainNavMenu('');\">\r\n
        \         <a tabindex=\"-2\" class=\"dropdown-toggle  \" href=\"http://mosman.nsw.gov.au/mosman\"
        target=\"\">About Mosman</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n
        \ </div>\r\n</div>\r\n<script type=\"text/javascript\">\r\n      function
        toggleMainNavMenu(id) {\r\n        $('.xlihide').hide();\r\n        $('#xli'
        + id).show();\r\n      }\r\n       </script>\r\n<div id=\"wrapper\">\r\n<div
        class=\"container\">\r\n<div class=\"row\">\r\n            <div id=\"bd\"
        role=\"main\">\r\n                <div id=\"main\">\r\n                    <div
        class=\"containerLeft containerMMCMenu\">\r\n                        <div
        class=\"containerInner\">\r\n                            <div class=\"padded\">\r\n
        \                               \r\n    <div class=\"padded\" style=\"padding-left:20px;\">\r\n
        \       <div class=\"Links LinksGroup\">\r\n  <div id=\"m10660\" class=\"LinksTitle\"
        onclick=\"toggleMenu('10660');\">\r\n    <a href=\"#\" class=\"Links noBorder\"
        target=\"\">Quick Links</a>\r\n  </div>\r\n  <div id=\"i10660\" class=\"LinksSection\">\r\n
        \   <a href=\"../../pages/xc.track/SearchApplication.aspx\" class=\"Links\"
        target=\"\">Find an Application</a>\r\n    <a href=\"../../pages/xc.track/SearchProperty.aspx\"
        class=\"Links\" target=\"\">Find a Property</a>\r\n    <a href=\"../../Pages/XC.Track/ChooseFeed.aspx\"
        class=\"Links\" target=\"\">Choose Feeds</a>\r\n    <a href=\"../../Pages/Security/Login.aspx\"
        class=\"Links\" target=\"\">Login</a>\r\n  </div>\r\n</div>\r\n<div class=\"Links
        LinksGroup\">\r\n  <div id=\"m10650\" class=\"LinksTitle\" onclick=\"toggleMenu('10650');\">\r\n
        \   <a href=\"#\" class=\"Links noBorder\" target=\"\">DAs Lodged</a>\r\n
        \ </div>\r\n  <div id=\"i10650\" class=\"LinksSection\">\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=thisweek&amp;t=8,5&amp;k=LodgementDate\"
        class=\"Links\" target=\"\">This Week</a>\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=lastweek&amp;t=8,5&amp;k=LodgementDate\"
        class=\"Links\" target=\"\">Last Week</a>\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=thismonth&amp;t=8,5&amp;k=LodgementDate\"
        class=\"Links\" target=\"\">This Month</a>\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=lastmonth&amp;t=8,5&amp;k=LodgementDate\"
        class=\"Links\" target=\"\">Last Month</a>\r\n  </div>\r\n</div>\r\n<div class=\"Links
        LinksGroup\">\r\n  <div id=\"m10655\" class=\"LinksTitle\" onclick=\"toggleMenu('10655');\">\r\n
        \   <a href=\"#\" class=\"Links noBorder\" target=\"\">DAs Determined</a>\r\n
        \ </div>\r\n  <div id=\"i10655\" class=\"LinksSection\">\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=thisweek&amp;t=8,5&amp;k=DeterminationDate\"
        class=\"Links\" target=\"\">This Week</a>\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=lastweek&amp;t=8,5&amp;k=DeterminationDate\"
        class=\"Links\" target=\"\">Last Week</a>\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=thismonth&amp;t=8,5&amp;k=DeterminationDate\"
        class=\"Links\" target=\"\">This Month</a>\r\n    <a href=\"../../pages/xc.track/SearchApplication.aspx?d=lastmonth&amp;t=8,5&amp;k=DeterminationDate\"
        class=\"Links\" target=\"\">Last Month</a>\r\n  </div>\r\n</div>\r\n<script
        type=\"text/javascript\">\r\n    \t\t\t\tif ($.cookie(\"menu_10660\")==null)
        {\r\n    \t\t\t\t\t$.cookie(\"menu_10660\",'show',{expires:28,path:'/'});}\r\n
        \   \t\t\t\tif ($.cookie(\"menu_10660\")=='hide') {\r\n    \t\t\t\t\t$('#i10660').hide();}\r\n
        \   \t\t\t\r\n    \t\t\t\tif ($.cookie(\"menu_10650\")==null) {\r\n    \t\t\t\t\t$.cookie(\"menu_10650\",'show',{expires:28,path:'/'});}\r\n
        \   \t\t\t\tif ($.cookie(\"menu_10650\")=='hide') {\r\n    \t\t\t\t\t$('#i10650').hide();}\r\n
        \   \t\t\t\r\n    \t\t\t\tif ($.cookie(\"menu_10655\")==null) {\r\n    \t\t\t\t\t$.cookie(\"menu_10655\",'show',{expires:28,path:'/'});}\r\n
        \   \t\t\t\tif ($.cookie(\"menu_10655\")=='hide') {\r\n    \t\t\t\t\t$('#i10655').hide();}\r\n
        \   \t\t\t\r\n    \t\t\t\tif ($.cookie(\"menu_11011\")==null) {\r\n    \t\t\t\t\t$.cookie(\"menu_11011\",'show',{expires:28,path:'/'});}\r\n
        \   \t\t\t\tif ($.cookie(\"menu_11011\")=='hide') {\r\n    \t\t\t\t\t$('#i11011').hide();}\r\n
        \   \t\t\t\r\n    \t\t\tfunction toggleMenu(id) {\r\n    \t\t\tif ($.cookie('menu_'
        + id)=='hide') {\r\n    \t\t\t\t$.cookie('menu_' + id,'show',{expires:28,path:'/'});\r\n
        \   \t\t\t\t$('#i' + id).slideDown('slow');\r\n    \t\t\t\t} else {\r\n    \t\t\t\t$.cookie('menu_'
        + id,'hide',{expires:28,path:'/'});\r\n    \t\t\t\t$('#i' + id).slideUp('slow');\r\n
        \   \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t\t </script> \r\n\r\n<div class=\"Links
        LinksGroup\" style=\"display:none;\">\r\n    <div id=\"mSub\" class=\"LinksTitle\"
        onclick=\"toggleMenu('Sub');\">\r\n        <img src=\"../../Image/bullet_arrow_down.aspx\"
        alt=\"show\" id=\"gSub\" style=\"float:left;\" />Outstanding By Suburb\r\n
        \   </div>\r\n    <div id=\"iSub\" class=\"LinksSection\">\r\n        <a href=\"../../Pages/XC.Spatial.Applications/OutstandingApplications.aspx?o=Mosman\"
        class=\"Links\" target=\"\">Mosman</a>\r\n    </div>\r\n</div>\r\n<script
        type=\"text/javascript\">\r\n    if ($.cookie(\"menu_Sub\") == null) {\r\n
        \       $.cookie(\"menu_Sub\", 'hide', { expires: 28, path: '/' });\r\n    };\r\n
        \   $(function () {\r\n        if ($.cookie(\"menu_Sub\") === 'hide') {\r\n
        \           $('#iSub').hide();\r\n            $('#gSub').attr(\"src\", \"../../Image/bullet_arrow_right.aspx\");\r\n
        \       };\r\n    })\r\n</script>\r\n\r\n\r\n\r\n\r\n    </div>\r\n\t<br/>\r\n
        \   <div class=\"Padded\">\r\n        \r\n        \r\n    </div>\r\n\r\n                            </div>\r\n
        \                       </div>\r\n                    </div>\r\n                    <div
        class=\"containerRight\">\r\n                        \r\n                        <div
        class=\"containerInner\">\r\n                            <div class=\"padded\">\r\n
        \                               \r\n                                \r\n    <div
        class=\"padded\">\r\n        <div id=\"ctl00_ctMain_pnlMain\">\r\n\t\r\n            \r\n<script
        type=\"text/javascript\">\r\n    $(document).ready(function () {\r\n        $(\".application\").autocomplete({\r\n
        \           delay: 50,\r\n            minLength: 1,\r\n            source:
        function (request, response) {\r\n                $('#loading').show();\r\n
        \               $.ajax({\r\n                    type: 'POST',\r\n                    url:
        '../../Common/Services/AutoComplete.aspx/GetAutoCompletePairList',\r\n                    data:
        '{\"sql\":\"~/Pages/XC.Track/Sql/ApplicationSearchXService.sql\",\"conn\":\"'
        + 'Authority' + '\",\"term\":\"' + request.term.replace(\"-\", \"/dash/\").replace(\"'\",
        \"/quot/\") + '\"}',\r\n                    contentType: \"application/json;
        charset=utf-8\",\r\n                    dataType: \"json\",\r\n                    success:
        function (data) {\r\n                        data = data.d;\r\n                        response(data);\r\n
        \                   }\r\n                });\r\n            },\r\n            select:
        function (event, ui) {\r\n                $('#loading').show();\r\n                $('.application').val(ui.item.label);\r\n
        \               switch (ui.item.value.substr(0, 3)) {\r\n                    case
        'aid': window.location = 'SearchApplication.aspx?id=' + ui.item.value.substr(4);
        break;\r\n                    case 'pid': window.location = 'SearchApplication.aspx?pid='
        + ui.item.value.substr(4); break;\r\n                    case 'sid': window.location
        = 'SearchApplication.aspx?sid=' + ui.item.value.substr(4); break;\r\n                    default:
        window.location = 'SearchApplication.aspx';\r\n                }\r\n                return
        false;\r\n            },\r\n            focus: function (event, ui) {\r\n
        \               $('.application').val(ui.item.label);\r\n                return
        false;\r\n            }\r\n        });\r\n    });\r\n</script>\r\n<div id=\"ctl00_ctMain_search_pnlSearch\"
        class=\"MainPanel\">\r\n\t\t\r\n    <h2>\r\n        Application Search</h2>\r\n
        \   <div style=\"font-size: small; color: gray; font-style: italic;\">\r\n
        \       Enter an application number, then select from the list of available\r\n
        \       <br />\r\n        applications displayed.</div>\r\n\t\t<div>\r\n\t\t
        \   <input name=\"ctl00$ctMain$search$txtSearch\" type=\"text\" id=\"ctl00_ctMain_search_txtSearch\"
        class=\"application\" />\r\n\t\t    <input type=\"submit\" name=\"ctl00$ctMain$search$btnSearch\"
        value=\"Search\" id=\"ctl00_ctMain_search_btnSearch\" class=\"buttonText buttonModify\"
        style=\"vertical-align:middle !important;\" />\r\n\t\t    <img id=\"loading\"
        src=\"../../Common/Common/Image.aspx?rid=loading03.gif\" alt=\"loading\"\r\n\t\t
        \       style=\"margin-left: 10px; display: none;\" />\r\n\t\t</div>\r\n    <br
        />\r\n    <br />\r\n\r\n\t</div>\r\n\r\n<div>\r\n    <br />\r\n    <br />\r\n
        \   <br />\r\n    \r\n</div>\r\n\r\n        \r\n</div>\r\n        <div id=\"ctl00_ctMain_d1\"
        class=\"shift\">\r\n            \r\n        </div>\r\n    </div>    \r\n\r\n
        \                           </div>\r\n                        </div>\r\n                    </div>\r\n
        \               </div>\r\n            </div>\r\n</div>\t    \r\n</div>\t    \r\n</div>\r\n\t
        \   \r\n\t    <div id=\"footer\">\n<div class=\"container\">\n<div class=\"row\">\n<ul
        class=\"hidden-sm\">\n    <li class=\"col-md-2 col-sm-2\">\n    <h4><a tabindex=\"-1\"
        href=\"http://mosman.nsw.gov.au/residents\">Residents</a></h4>\n    <ul>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/residents/waste-and-recycling\">Waste
        and&nbsp;Recycling</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/residents/transport\">Transport
        and&nbsp;Traffic</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/residents/property\">Your&nbsp;Property</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/residents/rates\">Rates</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/residents/Pets\">Pets and&nbsp;Animals</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/residents/resident-services\">Resident&nbsp;Services</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/residents/Safety-and-Emergency-Information\">Safety
        and&nbsp;Emergencies</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/residents/noise\">Noise</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/residents/health\">Health</a></li>\n
        \   </ul>\n    </li>\n    <li class=\"col-md-2 col-xs-2\">\n    <h4><a tabindex=\"-2\"
        href=\"http://mosman.nsw.gov.au/community\">Community</a></h4>\n    <ul>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/community/children-community\">Children
        and&nbsp;Families</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/community/youth\">Youth</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/community/seniors\">Seniors</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/community/volunteering\">Volunteering</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/community/disabled\">People
        with a&nbsp;Disability</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/community/carers\">Carers</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/community/community-grants\">Community&nbsp;Grants</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/community/mosman-connects\">Mosman&nbsp;Connects</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/community/safety-and-wellbeing\">Safety
        and&nbsp;Wellbeing</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/community/business\">Business
        in&nbsp;Mosman</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/community/aboriginal\">Aboriginal
        and Torres Strait&nbsp;Islanders</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/community/cultural-diversity\">Cultural&nbsp;Diversity</a></li>\n
        \   </ul>\n    </li>\n    <li class=\"col-md-2 col-xs-2\">\n    <h4><a tabindex=\"-4\"
        href=\"http://mosman.nsw.gov.au/planning-and-development\">Planning and Development</a></h4>\n
        \   <ul>\n        <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/development-applications\">Development&nbsp;Applications</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/planning-controls\">Planning&nbsp;Controls</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/heritage\">Heritage</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/planning-certificates\">Planning&nbsp;Certificates</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/safety\">Safety</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/mosman-design-awards\">Mosman
        Design&nbsp;Awards</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/planning-blog\">Planning&nbsp;News</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/planning-development-forms\">Forms</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/work-on-council-land\">Work
        on Council&nbsp;Land</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/planning-and-development/urban-planning-committee\">Urban
        Planning Committee&nbsp;(UPC)</a></li>\n    </ul>\n    </li>\n    <li class=\"col-md-2
        col-xs-2\">\n    <h4><a tabindex=\"-3\" href=\"http://mosman.nsw.gov.au/environment\">Environment</a></h4>\n
        \   <ul>\n        <li><a href=\"http://mosman.nsw.gov.au/environment/Tree-management\">Trees</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/environment/bushland\">Bushland
        and&nbsp;Biodiversity</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/environment/sustainable-living\">Sustainable&nbsp;Living</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/environment/water\">Water&nbsp;Management</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/environment/marine-coastal\">Marine
        and Coastal&nbsp;Environment</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/environment/atmosphere\">Atmospheric&nbsp;Environment</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/environment/visual-amenity\">Visual
        Amenity - Signage and&nbsp;Advertising</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/environment/feral-animal-control\">Feral
        Animal&nbsp;Control</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/environment/weeds-and-pests\">Weeds,
        Pests and Nuisance Native&nbsp;Animals</a></li>\n    </ul>\n    </li>\n    <li
        class=\"col-md-3 col-xs-3\">\n    <h4><a tabindex=\"-5\" href=\"http://mosman.nsw.gov.au/council\">Council</a></h4>\n
        \   <ul>\n        <li><a href=\"http://mosman.nsw.gov.au/council/about\">About
        Mosman&nbsp;Council</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/council/employment\">Employment
        at&nbsp;Council</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/council/meetings\">Council
        and Committee&nbsp;Meetings</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/council/consultation\">Community&nbsp;Consultation</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/council/venues\">Hiring of
        Council&nbsp;Spaces</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/council/media-releases\">Media&nbsp;Releases</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/council/reports\">Reports and&nbsp;Publications</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/council/tenders\">Tenders</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/council/policies-forms\">Policies
        and&nbsp;Forms</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/council/plans\">Management&nbsp;Plans</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/council/citizenship-ceremonies\">Citizenship&nbsp;Ceremonies</a></li>\n
        \       <li><a href=\"http://mosman.nsw.gov.au/council/access-to-information\">Access
        to&nbsp;Information</a></li>\n        <li><a href=\"http://mosman.nsw.gov.au/council/rangers\">Ranger&nbsp;Services</a></li>\n
        \   </ul>\n    </li>\n    <li class=\"col-md-1 col-xs-1 social\" id=\"wwwglyphs\">\n
        \   <ul>\n        <li class=\"utube\"><a href=\"https://www.youtube.com/user/mosmancouncil\"
        target=\"_blank\"><span data-icon=\"c\" class=\"glyphicon svg icon-youtube1\"></span></a></li>\n
        \       <li><a href=\"https://twitter.com/mosmancouncil\" target=\"_blank\"><span
        data-icon=\"o\" class=\"glyphicon svg icon-twitter1\"></span></a></li>\n        <li><a
        href=\"https://www.flickr.com/photos/mosmancouncil/\" target=\"_blank\"><span
        data-icon=\"i\" class=\"glyphicon svg icon-flickr1\"></span></a></li>\n        <li><a
        href=\"web/newsletters\"><span data-icon=\"i\" class=\"glyphicon svg icon-email1\"></span></a></li>\n
        \       <li class=\"last-child\"><a href=\"https://www.facebook.com/mosmancouncil\"
        target=\"_blank\"><span data-icon=\"h\" class=\"icon-facebook1 svg glyphicon\"></span></a></li>\n
        \   </ul>\n    </li>\n</ul>\n<span class=\"ft-logo hidden-sm\"><a href=\"http://mosman.nsw.gov.au/\"><img
        src=\"https://portal.mosman.nsw.gov.au/images/footer-logo.png\" alt=\"footer_logo\"
        /></a></span></div>\n<div class=\"row copyright\">\n<div class=\"foo-nav col-sm-6
        col-md-6 col-md-offset-2\">\n<ul>\n    <li><a href=\"http://mosman.nsw.gov.au/news\">News</a></li>\n
        \   <li class=\"visible-sm\"><a href=\"http://mosman.nsw.gov.au/contact us\">Contact
        us</a></li>\n    <li><a href=\"http://mosman.nsw.gov.au/web/sitemap\">Sitemap</a></li>\n
        \   <li><a href=\"http://mosman.nsw.gov.au/web/disclaimer\">Disclaimer</a></li>\n
        \   <li><a href=\"http://mosman.nsw.gov.au/web/privacy\">Privacy</a></li>\n</ul>\n</div>\n<div
        class=\"col-sm-6 col-md-4 c-f-1\" ><span> &copy; 2016 Mosman Municipal Council</span><span
        class=\"social visible-sm\"><a href=\"https://www.youtube.com/user/mosmancouncil\"
        target=\"_blank\"><span data-icon=\"c\" class=\"glyphicon svg icon-youtube1\"></span></a><a
        href=\"https://twitter.com/mosmancouncil\" target=\"_blank\"><span data-icon=\"o\"
        class=\"glyphicon svg icon-twitter1\"></span></a><a href=\"https://www.flickr.com/photos/mosmancouncil/\"
        target=\"_blank\"><span data-icon=\"i\" class=\"glyphicon svg icon-flickr1\"></span></a><a
        href=\"web/newsletters\"><span data-icon=\"i\" class=\"glyphicon svg icon-email1\"></span></a><a
        href=\"https://www.facebook.com/mosmancouncil\" target=\"_blank\"><span data-icon=\"h\"
        class=\"icon-facebook1 svg glyphicon\"></span></a></span></div>\n</div>\n<div
        class=\"row visible-sm visible-xs backtotop\">\n<div class=\"col-sm-2 col-sm-offset-5\">Back
        to top<span class=\"glyphicon icon-arrow-up\"></span></div>\n</div>\n</div>\n</div>\r\n
        \       </div>\r\n        <style type='text/css'>\r\n.navbar.navbar-inverse.hidden-xs.fix-nav
        > .container > .head-wrapper > ul.nav.navbar-nav.main-nav > li {\r\n    margin-left:
        0 !important;  \r\n    padding-left: 0 !important;  \r\n    list-style-type:
        none !important; \r\n  \r\n}\r\n\r\n.navbar.navbar-inverse #header ul.nav.navbar-nav.satelite-nav
        li {\r\n    margin-left: 0 !important;  \r\n    padding-left: 0 !important;
        \ \r\n    list-style-type: none !important; \r\n\r\n}\r\n\r\nul.nav.navbar-nav.main-nav
        li.dropdown ul.dropdown-menu li {\r\n    margin-left: 0 !important;  \r\n
        \   padding-left: 0 !important;  \r\n    list-style-type: none !important;
        \r\n\r\n}\r\n\r\n.navbar.navbar-inverse.hidden-xs.fix-nav > .container > .head-wrapper
        > ul.nav.navbar-nav.main-nav > li.dropdown > a.dropdown-toggle:hover {\r\n
        \   font-weight:bold; \r\n\r\n}\r\n\r\n#footer .container .row ul li, #footer
        .container .row ul li ul li {\r\n    margin-left: 0 !important;  \r\n    padding-left:
        0 !important;  \r\n    list-style-type: none !important; \r\n  \r\n}\r\n\r\n#footer
        .row.copyright ul li {\r\n    float: left; \r\n    margin-left: 30px !important;
        \r\n  \r\n}\r\n\r\n#bd {\r\n    width:100%  !important;\r\n\r\n}\r\n\r\n/*
        Override www Styling */\r\n.ndetail {display: block; padding: 2px; text-align:
        left; width: 99%; overflow: visible; }\r\n.ndetailleft {float: left; width:
        23%; overflow: visible; }\r\n.ndetailright {display: inline-block; width:
        76%; overflow: visible; }\r\n\r\ntable.documentlist,\r\ntable.documentlist
        tr,\r\ntable.documentlist tbody,\r\ntable.documentlist thead,\r\ntable.documentlist
        th,\r\ntable.documentlist td { padding: 0 !important; border-top: none !important;}\r\n\r\ntable.documentlist
        table.table {margin-top: 0 !important; margin-bottom: 0 !important}\r\n\r\n
        \ /* Foi public access site */\r\ntable#ctl00_ctMain_rblSearchType.table,\r\ntable#ctl00_ctMain_rblSearchType.table
        tbody,\r\ntable#ctl00_ctMain_rblSearchType.table tr,\r\ntable#ctl00_ctMain_rblSearchType.table
        td,\r\ntable#ctl00_ctMain_rblSearchType.table thead,\r\ntable#ctl00_ctMain_rblSearchType.table
        th\r\n    {padding:0 !important;margin-top: 1px !important;margin-bottom:
        2px !important; border-top: none !important;}\r\n\r\nli#wwwglyphs {display:none
        !important;}\r\n\r\n  /* Councillor Access Page */\r\nspan#ctl00_ctMain_iView_lblResults
        table.table,\r\nspan#ctl00_ctMain_iView_lblResults table.table tbody,\r\nspan#ctl00_ctMain_iView_lblResults
        table.table tr,\r\nspan#ctl00_ctMain_iView_lblResults table.table td,\r\nspan#ctl00_ctMain_iView_lblResults
        table.table thead,\r\nspan#ctl00_ctMain_iView_lblResults table.table th\r\n
        \   {padding:0; margin-top: 1px; margin-bottom: 2px; border-top: none;}\r\n\r\nspan#ctl00_ctMain_iView_lblResults
        table.table td { padding-bottom: 2px;}\r\n  \r\n /* Councillor Questions W/o
        */\r\ntable#ctl00_ctMain_iQWN_tabTheTab,\r\ntable#ctl00_ctMain_iQWN_tabTheTab
        tbody,\r\ntable#ctl00_ctMain_iQWN_tabTheTab tr,\r\ntable#ctl00_ctMain_iQWN_tabTheTab
        td,\r\ntable#ctl00_ctMain_iQWN_tabTheTab thead,\r\ntable#ctl00_ctMain_iQWN_tabTheTab
        th\r\n    {padding:0; margin-top: 1px; margin-bottom: 2px; border-top: none;}\r\n\r\ntable#ctl00_ctMain_iQWN_tabTheTab
        td { padding-bottom: 2px;}\r\n  </style>\r\n        \r\n        <script type=\"text/javascript\"
        src=\"../../Common/Javascript/final.js\"></script>\r\n        <script type=\"text/javascript\"
        src=\"../../Common/User/User.js\"></script> \r\n        <script type=\"text/javascript\">\r\n
        \           $(document).ready(function () {\r\n                document.title
        = document.title + ' - TechnologyOne';\r\n            });\r\n        </script>\r\n
        \       <script type=\"text/javascript\" src=\"https://portal.mosman.nsw.gov.au/App_Themes/User/min_g_script_t_12.js\"
        defer=\"\"></script>\r\n    </form>\r\n</body>\r\n</html>"
    http_version: 
  recorded_at: Tue, 14 May 2019 14:00:00 GMT
- request:
    method: get
    uri: http://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx?d=last14days&k=LodgementDate&o=xml&t=8,5
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zgsldefukfbkswl13x3zn1jq
      Host:
      - portal.mosman.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Location:
      - https://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx?d=last14days&k=LodgementDate&o=xml&t=8%2C5
      X-Frame-Options:
      - SAMEORIGIN
      Date:
      - Sun, 09 Jun 2019 16:17:35 GMT
      Content-Length:
      - '248'
    body:
      encoding: UTF-8
      string: |-
        <head><title>Document Moved</title></head>
        <body><h1>Object Moved</h1>This document may be found <a HREF="https://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx?d=last14days&amp;k=LodgementDate&amp;o=xml&amp;t=8%2C5">here</a></body>
    http_version: 
  recorded_at: Tue, 14 May 2019 14:00:00 GMT
- request:
    method: get
    uri: https://portal.mosman.nsw.gov.au/Pages/XC.Track/SearchApplication.aspx?d=last14days&k=LodgementDate&o=xml&t=8,5
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mechanize/2.7.6 Ruby/2.5.1p57 (http://github.com/sparklemotion/mechanize/)
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Cookie:
      - ASP.NET_SessionId=zgsldefukfbkswl13x3zn1jq
      Host:
      - portal.mosman.nsw.gov.au
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Content-Type:
      - application/xml; charset=utf-8
      X-Frame-Options:
      - SAMEORIGIN
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Sun, 09 Jun 2019 16:17:36 GMT
      Content-Length:
      - '673401'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Tue, 14 May 2019 14:00:00 GMT
recorded_with: VCR 5.0.0
